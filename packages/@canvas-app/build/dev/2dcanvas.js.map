{"version":3,"file":"2dcanvas.js","mappings":"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","sources":["webpack://canvas-app/webpack/universalModuleDefinition","webpack://canvas-app/./src/app/2dcanvas/Geometies/Base.ts","webpack://canvas-app/./src/app/2dcanvas/Geometies/Circle.ts","webpack://canvas-app/./src/app/2dcanvas/Geometies/Line.ts","webpack://canvas-app/./src/app/2dcanvas/Geometies/Rect.ts","webpack://canvas-app/./src/app/2dcanvas/Scene/CanvasController.ts","webpack://canvas-app/./src/app/2dcanvas/Scene/Scene.ts","webpack://canvas-app/./src/app/2dcanvas/Tools/BoxSelect.Tool.ts","webpack://canvas-app/./src/app/utils/Events.class.ts","webpack://canvas-app/webpack/bootstrap","webpack://canvas-app/webpack/runtime/define property getters","webpack://canvas-app/webpack/runtime/hasOwnProperty shorthand","webpack://canvas-app/webpack/runtime/make namespace object","webpack://canvas-app/./src/app/2dcanvas/main.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","import { TCanvasDrawSetting } from '../types/canvas.types'\r\n\r\nexport type TGeometryConfig = {\r\n\tnormal: TCanvasDrawSetting\r\n\thighlight: TCanvasDrawSetting\r\n}\r\n\r\nexport const DEFAULT_NORMAL_DRAW_SETTING: TCanvasDrawSetting = {\r\n\tfillStyle: 'rgba(255, 255, 0, 1)',\r\n\tlineWidth: 1,\r\n\tstrokeStyle: 'rgba(0, 0, 0, 1)',\r\n}\r\nexport const DEFAULT_HIGHLIGHT_DRAW_SETTING: TCanvasDrawSetting = {\r\n\tstrokeStyle: 'rgba(255, 0, 0, 255)',\r\n\tlineWidth: 5,\r\n\tfillStyle: 'rgba(255, 255, 255, 1)',\r\n}\r\n\r\nexport class GeometryBase {\r\n\tprivate brushConfig: TGeometryConfig\r\n\tprivate highlight: boolean\r\n\tprivate checked: boolean\r\n\tprivate index: number\r\n\tconstructor() {\r\n\t\tthis.brushConfig = {\r\n\t\t\tnormal: DEFAULT_NORMAL_DRAW_SETTING,\r\n\t\t\thighlight: DEFAULT_HIGHLIGHT_DRAW_SETTING,\r\n\t\t}\r\n\t\tthis.highlight = false\r\n\t\tthis.checked = false\r\n\t\tthis.index = -1\r\n\t}\r\n\r\n\tpublic setNormalPaintStyle(options: TCanvasDrawSetting): void {\r\n\t\tthis.brushConfig.normal = { ...this.brushConfig.normal, ...options }\r\n\t}\r\n\r\n\tpublic setHighlightPaintStyle(options: TCanvasDrawSetting): void {\r\n\t\tthis.brushConfig.highlight = { ...this.brushConfig.highlight, ...options }\r\n\t}\r\n\r\n\tpublic getPaintStyle(): TCanvasDrawSetting {\r\n\t\treturn this.isHighlight() ? this.brushConfig.highlight : this.brushConfig.normal\r\n\t}\r\n\r\n\tpublic setShapeParameter(x: number, y: number): void {\r\n\t\t/* ... */\r\n\t}\r\n\r\n\tpublic setAssistSetting(options: any): void {\r\n\t\t/* ... */\r\n\t}\r\n\r\n\tpublic moveTo(x: number, y: number): void {\r\n\t\t/* ... */\r\n\t}\r\n\r\n\tpublic moveDist(distX: number, distY: number): void {\r\n\t\t/* ... */\r\n\t}\r\n\r\n\tpublic choose(x: number, y: number): void {\r\n\t\t/* ... */\r\n\t}\r\n\r\n\tpublic getOffset(x: number, y: number): void {\r\n\t\t/* ... */\r\n\t}\r\n\r\n\tpublic draw(ctx: CanvasRenderingContext2D): void {\r\n\t\t/* ... */\r\n\t}\r\n\r\n\tpublic validate(): void {\r\n\t\t/* ... */\r\n\t}\r\n\r\n\tpublic setIndex(index: number = -1): void {\r\n\t\tthis.index = index\r\n\t}\r\n\r\n\tpublic getIndex(): number {\r\n\t\treturn this.index\r\n\t}\r\n\r\n\tpublic setChecked(): void {\r\n\t\tthis.checked = true\r\n\t}\r\n\r\n\tpublic setUnChecked(): void {\r\n\t\tthis.checked = false\r\n\t}\r\n\r\n\tpublic isChecked(): boolean {\r\n\t\treturn this.checked\r\n\t}\r\n\r\n\tpublic setHighlight(): void {\r\n\t\tthis.highlight = true\r\n\t}\r\n\r\n\tpublic setUnHighlight(): void {\r\n\t\tthis.highlight = false\r\n\t}\r\n\r\n\tpublic isHighlight(): boolean {\r\n\t\treturn this.highlight\r\n\t}\r\n}\r\n","import { TCanvasDrawSetting } from '../types/canvas.types'\r\nimport { TGeometryOffset } from '../types/geometry.types'\r\nimport { GeometryBase } from './Base'\r\n\r\nexport class Circle extends GeometryBase {\r\n\tprivate x: number\r\n\tprivate y: number\r\n\tprivate r: number\r\n\tconstructor(x: number, y: number, r: number = 0) {\r\n\t\tsuper()\r\n\t\tthis.x = x\r\n\t\tthis.y = y\r\n\t\tthis.r = r\r\n\t}\r\n\r\n\tpublic setShapeParameter(x: number, y: number): void {\r\n\t\tthis.r = Math.sqrt(Math.pow(this.x - x, 2) + Math.pow(this.y - y, 2))\r\n\t}\r\n\r\n\tpublic moveDist(distX: number, distY: number): void {\r\n\t\tthis.x += distX\r\n\t\tthis.y += distY\r\n\t}\r\n\r\n\tpublic getOffset(x: number, y: number): TGeometryOffset {\r\n\t\treturn {\r\n\t\t\tdistX: x - this.x,\r\n\t\t\tdistY: y - this.y,\r\n\t\t}\r\n\t}\r\n\r\n\tpublic choose(x: number, y: number): boolean {\r\n\t\treturn Math.pow(this.x - x, 2) + Math.pow(this.y - y, 2) < Math.pow(this.r, 2)\r\n\t}\r\n\r\n\tpublic draw(ctx: CanvasRenderingContext2D): void {\r\n\t\tconst brushConfig: TCanvasDrawSetting = this.getPaintStyle()\r\n\t\tctx.beginPath()\r\n\t\tctx.fillStyle = brushConfig.fillStyle\r\n\t\tctx.strokeStyle = brushConfig.strokeStyle\r\n\t\tctx.lineWidth = brushConfig.lineWidth\r\n\t\tctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI)\r\n\t\tctx.stroke()\r\n\t\tctx.fill()\r\n\t\tctx.closePath()\r\n\t}\r\n\r\n\tpublic validate(): boolean {\r\n\t\treturn this.r >= 5\r\n\t}\r\n}\r\n","import { TCanvasDrawSetting } from '../types/canvas.types'\r\nimport { TGeometryOffset } from '../types/geometry.types'\r\nimport { GeometryBase } from './Base'\r\n\r\ntype TPosition2D = {\r\n\tx: number\r\n\ty: number\r\n}\r\n\r\nexport class Line extends GeometryBase {\r\n\tprivate path: Array<TPosition2D>\r\n\tprivate smooth: boolean\r\n\tprivate lineWidth: number\r\n\tprivate samplingIntervalNumber: number\r\n\tconstructor(x: number, y: number) {\r\n\t\tsuper()\r\n\t\tthis.path = [{ x, y }]\r\n\t\tthis.smooth = false\r\n\t\tthis.lineWidth = 10\r\n\t\tthis.samplingIntervalNumber = 2\r\n\t}\r\n\r\n\tpublic setShapeParameter(x: number, y: number): void {\r\n\t\tconst lastPoint: TPosition2D = this.path[this.path.length - 1]\r\n\t\tif (Math.abs(lastPoint.x - x) > 1 || Math.abs(lastPoint.y - y) > 1) {\r\n\t\t\tthis.path.push({ x, y })\r\n\t\t}\r\n\t}\r\n\r\n\tpublic setAssistSetting({ smooth }: { smooth: boolean }): void {\r\n\t\tthis.smooth = smooth\r\n\t}\r\n\r\n\tpublic moveTo(x: number, y: number): void {\r\n\t\tconst startPoint = this.path[0]\r\n\t\tconst startPoinTGeometryOffsetX = x - startPoint.x\r\n\t\tconst startPoinTGeometryOffsetY = y - startPoint.y\r\n\t\tfor (let i: number = 0; i < this.path.length; i++) {\r\n\t\t\tthis.path[i].x += startPoinTGeometryOffsetX\r\n\t\t\tthis.path[i].y += startPoinTGeometryOffsetY\r\n\t\t}\r\n\t}\r\n\r\n\tpublic moveDist(distX: number, distY: number): void {\r\n\t\tfor (let i: number = 0; i < this.path.length; i++) {\r\n\t\t\tthis.path[i].x += distX\r\n\t\t\tthis.path[i].y += distY\r\n\t\t}\r\n\t}\r\n\r\n\tpublic choose(x: number, y: number): boolean {\r\n\t\tconst round: number = this.lineWidth > 10 ? Math.pow(this.lineWidth, 2) : 30\r\n\t\tfor (let i: number = 0; i < this.path.length; i++) {\r\n\t\t\tif (Math.pow(this.path[i].x - x, 2) + Math.pow(this.path[i].y - y, 2) < round) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false\r\n\t}\r\n\r\n\tpublic getOffset(x: number, y: number): TGeometryOffset {\r\n\t\treturn {\r\n\t\t\tdistX: x - this.path[0].x,\r\n\t\t\tdistY: y - this.path[0].y,\r\n\t\t}\r\n\t}\r\n\r\n\tpublic draw(ctx: CanvasRenderingContext2D): void {\r\n\t\tconst brushConfig: TCanvasDrawSetting = this.getPaintStyle()\r\n\t\tctx.fillStyle = `rgba(0, 0, 0, 0)`\r\n\t\tctx.strokeStyle = brushConfig.strokeStyle\r\n\t\tctx.lineWidth = brushConfig.lineWidth\r\n\t\tctx.lineJoin = 'round'\r\n\t\t/* \r\n            非平滑曲线\r\n         */\r\n\t\tif (!this.smooth) {\r\n\t\t\tctx.beginPath()\r\n\t\t\tfor (let i = 0; i < this.path.length; i++) {\r\n\t\t\t\tctx.lineTo(this.path[i].x, this.path[i].y)\r\n\t\t\t}\r\n\t\t\tctx.stroke()\r\n\t\t\tctx.closePath()\r\n\t\t\treturn\r\n\t\t}\r\n\t\tif (this.path.length > 3) {\r\n\t\t\tctx.beginPath()\r\n\t\t\tctx.moveTo(this.path[0].x, this.path[0].y)\r\n\t\t\tlet i = 1\r\n\t\t\t// let samplingIntervalNumber = this.path.length >= this.samplingIntervalNumber ? this.samplingIntervalNumber : 1\r\n\t\t\tfor (i = 1; i < this.path.length - 2; i += this.samplingIntervalNumber) {\r\n\t\t\t\tif (this.path[i] && this.path[i + 1]) {\r\n\t\t\t\t\tconst xc = (this.path[i].x + this.path[i + 1].x) / 2\r\n\t\t\t\t\tconst yc = (this.path[i].y + this.path[i + 1].y) / 2\r\n\t\t\t\t\tctx.quadraticCurveTo(this.path[i].x, this.path[i].y, xc, yc)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (i >= this.path.length - 2) {\r\n\t\t\t\ti = this.path.length - 2\r\n\t\t\t}\r\n\t\t\tctx.quadraticCurveTo(this.path[i].x, this.path[i].y, this.path[i + 1].x, this.path[i + 1].y)\r\n\t\t\tctx.stroke()\r\n\t\t\tctx.closePath()\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\r\n\tpublic validate(): boolean {\r\n\t\treturn this.path.length >= 5\r\n\t}\r\n}\r\n","import { TCanvasDrawSetting } from '../types/canvas.types'\r\nimport { TGeometryOffset } from '../types/geometry.types'\r\nimport { GeometryBase } from './Base'\r\n\r\nexport class Rect extends GeometryBase {\r\n\tprivate x: number\r\n\tprivate y: number\r\n\tprivate w: number\r\n\tprivate h: number\r\n\tconstructor(x: number, y: number, w: number, h: number) {\r\n\t\tsuper()\r\n\t\tthis.x = x\r\n\t\tthis.y = y\r\n\t\tthis.w = w\r\n\t\tthis.h = h\r\n\t}\r\n\r\n\tpublic setShapeParameter(x: number, y: number): void {\r\n\t\tthis.w = x - this.x\r\n\t\tthis.h = y - this.y\r\n\t}\r\n\r\n\tpublic moveDist(distX: number, distY: number): void {\r\n\t\tthis.x += distX\r\n\t\tthis.y += distY\r\n\t}\r\n\r\n\tpublic getOffset(x: number, y: number): TGeometryOffset {\r\n\t\treturn {\r\n\t\t\tdistX: x - this.x,\r\n\t\t\tdistY: y - this.y,\r\n\t\t}\r\n\t}\r\n\r\n\tpublic choose(x: number, y: number): boolean {\r\n\t\tconst absoluteMiddleX: number = this.x + this.w / 2\r\n\t\tconst absoluteMiddleY: number = this.y + this.h / 2\r\n\t\treturn Math.abs(x - absoluteMiddleX) < Math.abs(this.w / 2) && Math.abs(y - absoluteMiddleY) < Math.abs(this.h / 2)\r\n\t}\r\n\r\n\tpublic draw(ctx: CanvasRenderingContext2D): void {\r\n\t\tconst brushConfig: TCanvasDrawSetting = this.getPaintStyle()\r\n\t\tctx.beginPath()\r\n\t\tctx.fillStyle = brushConfig.fillStyle\r\n\t\tctx.strokeStyle = brushConfig.strokeStyle\r\n\t\tctx.lineWidth = brushConfig.lineWidth\r\n\t\tctx.rect(this.x, this.y, this.w, this.h)\r\n\t\tctx.stroke()\r\n\t\tctx.fill()\r\n\t\tctx.closePath()\r\n\t}\r\n\r\n\tpublic validate() {\r\n\t\treturn Math.abs(this.w) >= 5 && Math.abs(this.h) >= 5\r\n\t}\r\n}\r\n","import Events from '../../utils/Events.class'\r\nimport { ECanvasState, Scene } from './Scene'\r\n\r\nconst KEYCODE_DELETE: number = 46\r\nconst KEYCODE_CTRL: number = 17\r\n\r\nexport class CanvasContoller extends Scene {\r\n\tprivate variablesPool: { [key: string]: any }\r\n\tprivate eventsHandler: Events\r\n\tconstructor(canvasElement: HTMLCanvasElement) {\r\n\t\tsuper(canvasElement)\r\n\t\tthis.variablesPool\r\n\t\tthis.eventsHandler\r\n\t}\r\n\r\n\tpublic init(): void {\r\n\t\tthis.variablesPool = {}\r\n\t\tthis.eventsHandler = new Events()\r\n\t\tthis.initScene()\r\n\t\tthis.initCanvasContoller()\r\n\t}\r\n\r\n\tprivate initCanvasContoller(): void {\r\n\t\tthis.bindRightClickEvent()\r\n\t\tthis.bindMousedownEvent()\r\n\t\tthis.bindMousemoveEvent()\r\n\t\tthis.bindMouseupEvent()\r\n\t\tthis.bindKeydownEvent()\r\n\t\tthis.bindKeyupEvent()\r\n\t\tthis.bindBlurEvent()\r\n\t}\r\n\r\n\tprivate isOnlyCtrlKeydown(): boolean {\r\n\t\treturn this.keyboardState.keys.length === 1 && this.keyboardState.keys[0] === KEYCODE_CTRL\r\n\t}\r\n\r\n\tprivate bindRightClickEvent(): void {\r\n\t\tthis.canvasElement.addEventListener('contextmenu', evte => {\r\n\t\t\t// evte.preventDefault()\r\n\t\t})\r\n\t}\r\n\r\n\tprivate bindMousedownEvent(): void {\r\n\t\tthis.canvasElement.addEventListener('mousedown', evte => {\r\n\t\t\tevte.stopPropagation()\r\n\t\t\tthis.mouseState.down = true\r\n\t\t\tthis.mouseState.x = evte.offsetX\r\n\t\t\tthis.mouseState.y = evte.offsetY\r\n\t\t\tPromise.resolve().then(() => {\r\n\t\t\t\tif (evte.button !== 0) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\t/* 绘制模式 */\r\n\t\t\t\tif (this.config.state === ECanvasState.DRAWING) {\r\n\t\t\t\t\tthis.mouseState.selectedIndexs = []\r\n\t\t\t\t\t/* 创建图形实例 */\r\n\t\t\t\t\tif (this.geometryConstructor) {\r\n\t\t\t\t\t\tthis.variablesPool.geometryTarget = new this.geometryConstructor(this.mouseState.x, this.mouseState.y)\r\n\t\t\t\t\t\tthis.variablesPool.geometryTarget.setNormalPaintStyle(this.toolState.paintBrushState)\r\n\t\t\t\t\t\tthis.variablesPool.geometryTarget.setAssistSetting({ smooth: this.toolState.smooth })\r\n\t\t\t\t\t}\r\n\t\t\t\t\t/* 将新创建的实例标注为鼠标动态跟踪对象  */\r\n\t\t\t\t\tthis.mouseState.pointTarget = this.variablesPool.geometryTarget\r\n\t\t\t\t\tthis.variablesPool.geometryTarget = null\r\n\t\t\t\t\t/* 重绘离屏画布 */\r\n\t\t\t\t\tthis.clearCanvas(this.offScreen.cacheCanvasCtx)\r\n\t\t\t\t\tfor (let i: number = 0; i < this.geometries.length; i++) {\r\n\t\t\t\t\t\tthis.geometries[i].setUnHighlight()\r\n\t\t\t\t\t\tthis.geometries[i].setUnChecked()\r\n\t\t\t\t\t\tthis.geometries[i].draw(this.offScreen.cacheCanvasCtx)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t/* ... */\r\n\t\t\t\t\tthis.config.dirty = true\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\t/* 选择模式 */\r\n\t\t\t\tif (this.config.state === ECanvasState.SELECT) {\r\n\t\t\t\t\tthis.variablesPool.targetResult = this.findClickedTarget(this.mouseState.x, this.mouseState.y)\r\n\t\t\t\t\tif (!this.variablesPool.targetResult.geometryTarget) {\r\n\t\t\t\t\t\tthis.mouseState.selectedIndexs = []\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.geometries.length; i++) {\r\n\t\t\t\t\t\t\tthis.geometries[i].setUnChecked()\r\n\t\t\t\t\t\t\tthis.geometries[i].setUnHighlight()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.mouseState.toolTarget = this.tools.boxSelector\r\n\t\t\t\t\t\tthis.mouseState.toolTarget.setStartCoordinate(this.mouseState.x, this.mouseState.y)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconst inIndex: number = this.mouseState.selectedIndexs.indexOf(this.variablesPool.targetResult.geometryTargetIndex)\r\n\t\t\t\t\t\tif (this.mouseState.selectedIndexs.length >= 2 && inIndex >= 0) {\r\n\t\t\t\t\t\t\tif (this.isOnlyCtrlKeydown()) {\r\n\t\t\t\t\t\t\t\tif (inIndex >= 0) {\r\n\t\t\t\t\t\t\t\t\tthis.mouseState.selectedIndexs.splice(inIndex, 1)\r\n\t\t\t\t\t\t\t\t\tthis.variablesPool.targetResult.geometryTarget.setUnChecked()\r\n\t\t\t\t\t\t\t\t\tthis.variablesPool.targetResult.geometryTarget.setUnHighlight()\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tthis.mouseState.selectedIndexs.push(this.variablesPool.targetResult.geometryTargetIndex)\r\n\t\t\t\t\t\t\t\t\tthis.variablesPool.targetResult.geometryTarget.setChecked()\r\n\t\t\t\t\t\t\t\t\tthis.variablesPool.targetResult.geometryTarget.setHighlight()\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (this.isOnlyCtrlKeydown()) {\r\n\t\t\t\t\t\t\t\tif (inIndex >= 0) {\r\n\t\t\t\t\t\t\t\t\tthis.mouseState.selectedIndexs.splice(inIndex, 1)\r\n\t\t\t\t\t\t\t\t\tthis.variablesPool.targetResult.geometryTarget.setUnChecked()\r\n\t\t\t\t\t\t\t\t\tthis.variablesPool.targetResult.geometryTarget.setUnHighlight()\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tthis.mouseState.selectedIndexs.push(this.variablesPool.targetResult.geometryTargetIndex)\r\n\t\t\t\t\t\t\t\t\tthis.variablesPool.targetResult.geometryTarget.setChecked()\r\n\t\t\t\t\t\t\t\t\tthis.variablesPool.targetResult.geometryTarget.setHighlight()\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.mouseState.selectedIndexs = [this.variablesPool.targetResult.geometryTargetIndex]\r\n\t\t\t\t\t\t\t\tfor (let i: number = 0; i < this.geometries.length; i++) {\r\n\t\t\t\t\t\t\t\t\tif (this.mouseState.selectedIndexs.includes(i)) {\r\n\t\t\t\t\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tthis.geometries[i].setUnChecked()\r\n\t\t\t\t\t\t\t\t\tthis.geometries[i].setUnHighlight()\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tthis.variablesPool.targetResult.geometryTarget.setChecked()\r\n\t\t\t\t\t\t\t\tthis.variablesPool.targetResult.geometryTarget.setHighlight()\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t/* 重绘离屏画布 */\r\n\t\t\t\t\tthis.clearCanvas(this.offScreen.cacheCanvasCtx)\r\n\t\t\t\t\tfor (let i: number = 0; i < this.geometries.length; i++) {\r\n\t\t\t\t\t\tif (this.mouseState.selectedIndexs.includes(i)) {\r\n\t\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.geometries[i].draw(this.offScreen.cacheCanvasCtx)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t/* ... */\r\n\t\t\t\t\tthis.config.dirty = true\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\tprivate bindMousemoveEvent(): void {\r\n\t\tdocument.addEventListener('mousemove', evte => {\r\n\t\t\tevte.stopPropagation()\r\n\t\t\tif (!this.mouseState.down || this.isOnlyCtrlKeydown()) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tif (\r\n\t\t\t\tevte.clientX - this.config.canvasRect.left <= 0 ||\r\n\t\t\t\tevte.clientY - this.config.canvasRect.top <= 0 ||\r\n\t\t\t\tevte.clientX >= this.config.canvasRect.right ||\r\n\t\t\t\tevte.clientY >= this.config.canvasRect.bottom\r\n\t\t\t) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tthis.variablesPool.moveDistX = evte.offsetX - this.mouseState.x\r\n\t\t\tthis.variablesPool.moveDistY = evte.offsetY - this.mouseState.y\r\n\t\t\tthis.mouseState.x = evte.offsetX\r\n\t\t\tthis.mouseState.y = evte.offsetY\r\n\t\t\tthis.mouseState.isMove = true\r\n\t\t\t/* 绘制模式 */\r\n\t\t\tif (this.config.state === ECanvasState.DRAWING && this.mouseState.pointTarget) {\r\n\t\t\t\tthis.mouseState.pointTarget.setShapeParameter(this.mouseState.x, this.mouseState.y)\r\n\t\t\t}\r\n\t\t\t/* 选择模式 */\r\n\t\t\tif (this.config.state === ECanvasState.SELECT) {\r\n\t\t\t\tif (this.mouseState.toolTarget) {\r\n\t\t\t\t\tthis.mouseState.toolTarget.setShapeParameter(this.mouseState.x, this.mouseState.y)\r\n\t\t\t\t}\r\n\t\t\t\tfor (let i: number = this.mouseState.selectedIndexs.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tconst geometry = this.geometries[this.mouseState.selectedIndexs[i]]\r\n\t\t\t\t\tgeometry.moveDist(this.variablesPool.moveDistX, this.variablesPool.moveDistY)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tprivate bindMouseupEvent(): void {\r\n\t\tdocument.addEventListener('mouseup', evte => {\r\n\t\t\tevte.stopPropagation()\r\n\t\t\tif (this.mouseState.down) {\r\n\t\t\t\tthis.mouseState.isMove = false\r\n\t\t\t\tthis.mouseState.down = false\r\n\t\t\t\t/* 绘制模式 */\r\n\t\t\t\tif (this.config.state === ECanvasState.DRAWING && this.mouseState.pointTarget) {\r\n\t\t\t\t\t/* 将当前图形推入存储队列 */\r\n\t\t\t\t\tif (this.mouseState.pointTarget.validate()) {\r\n\t\t\t\t\t\tthis.mouseState.pointTarget.setIndex(this.geometries.length)\r\n\t\t\t\t\t\tthis.geometries.push(this.mouseState.pointTarget)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.mouseState.pointTarget = null\r\n\t\t\t\t\t/* 重绘离屏画布 */\r\n\t\t\t\t\tthis.clearCanvas(this.offScreen.cacheCanvasCtx)\r\n\t\t\t\t\tfor (let i: number = 0; i < this.geometries.length; i++) {\r\n\t\t\t\t\t\tthis.geometries[i].draw(this.offScreen.cacheCanvasCtx)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t/* ... */\r\n\t\t\t\t\tthis.config.dirty = false\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\t/* 选择模式 */\r\n\t\t\t\tif (this.config.state === ECanvasState.SELECT) {\r\n\t\t\t\t\tif (this.mouseState.toolTarget) {\r\n\t\t\t\t\t\tthis.mouseState.toolTarget.restoreStatus()\r\n\t\t\t\t\t\tthis.mouseState.toolTarget = null\r\n\t\t\t\t\t\tthis.clearCanvas(this.canvasCtx)\r\n\t\t\t\t\t\t/* 读取缓存画布图像并绘制输出 */\r\n\t\t\t\t\t\tthis.paintWith(this.canvasCtx, this.offScreen.cacheCanvasElement)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.mouseState.pointTarget = null\r\n\t\t\t\t\t/* ... */\r\n\t\t\t\t\tthis.config.dirty = false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tprivate bindBlurEvent(): void {\r\n\t\twindow.addEventListener('blur', evte => {\r\n\t\t\tthis.keyboardState.keys = []\r\n\t\t\tthis.config.dirty = false\r\n\t\t})\r\n\t}\r\n\r\n\tprivate bindKeydownEvent(): void {\r\n\t\tdocument.addEventListener('keydown', evte => {\r\n\t\t\tif (!this.keyboardState.keys.includes(evte.keyCode)) {\r\n\t\t\t\tthis.keyboardState.keys.push(evte.keyCode)\r\n\t\t\t}\r\n\t\t\t/* 删除图形对象 */\r\n\t\t\tif (evte.keyCode === KEYCODE_DELETE && this.mouseState.selectedIndexs.length) {\r\n\t\t\t\tconst geometries = []\r\n\t\t\t\tfor (let i: number = 0; i < this.geometries.length; i++) {\r\n\t\t\t\t\tif (!this.mouseState.selectedIndexs.includes(i)) {\r\n\t\t\t\t\t\tgeometries.push(this.geometries[i])\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.geometries = geometries\r\n\t\t\t\tthis.clearCanvas(this.offScreen.cacheCanvasCtx)\r\n\t\t\t\tfor (let i: number = 0; i < this.geometries.length; i++) {\r\n\t\t\t\t\tthis.geometries[i].draw(this.offScreen.cacheCanvasCtx)\r\n\t\t\t\t}\r\n\t\t\t\tthis.config.dirty = true\r\n\t\t\t\tthis.mouseState.selectedIndexs = []\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tprivate bindKeyupEvent(): void {\r\n\t\tdocument.addEventListener('keyup', evte => {\r\n\t\t\tconst opKeyIndex: number = this.keyboardState.keys.indexOf(evte.keyCode)\r\n\t\t\tif (opKeyIndex >= 0) {\r\n\t\t\t\tthis.keyboardState.keys.splice(opKeyIndex, 1)\r\n\t\t\t}\r\n\t\t\tif (!this.mouseState.down && !this.keyboardState.keys.length) {\r\n\t\t\t\tthis.config.dirty = false\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n}\r\n","import { BoxSelectTool } from '../Tools/BoxSelect.Tool'\r\nimport { TCanvasDrawSetting } from '../types/canvas.types'\r\nimport { TDOMClientRect, TDOMClientRectJSON } from '../types/dom.types'\r\nimport { TGeometryType } from '../types/geometry.types'\r\n\r\nexport enum ECanvasState {\r\n\tDRAWING = 'DRAWING',\r\n\tSELECT = 'SELECT',\r\n}\r\n\r\nexport type TSceneToolState = {\r\n\tpaintBrushState: TCanvasDrawSetting\r\n\tsmooth: boolean\r\n}\r\n\r\nexport type TSceneTools = {\r\n\tboxSelector: BoxSelectTool\r\n}\r\n\r\nexport type TSceneConfig = {\r\n\tstate: ECanvasState.DRAWING | ECanvasState.SELECT\r\n\tcanvasRect: TDOMClientRectJSON\r\n\tdirty: boolean\r\n\treDrawByResizeTimer: any\r\n}\r\n\r\nexport type TSceneoffScreen = {\r\n\tcacheCanvasElement: HTMLCanvasElement\r\n\tcacheCanvasCtx: CanvasRenderingContext2D | any\r\n}\r\n\r\nexport type TSceneKeyboardState = {\r\n\tkeys: Array<number>\r\n}\r\n\r\nexport type TSceneMouseState = {\r\n\tx: number\r\n\ty: number\r\n\ttargetOffsetX: number\r\n\ttargetOffsetY: number\r\n\tselectedIndexs: Array<number>\r\n\tdown: boolean\r\n\tpointTarget: TGeometryType\r\n\ttoolTarget: TGeometryType\r\n\tisMove: boolean\r\n}\r\n\r\nexport type TSceneClickFoundRes = {\r\n\tgeometryTarget: TGeometryType\r\n\tgeometryTargetIndex: number\r\n}\r\n\r\nexport const DEFAULT_CANVAS_DRAW_SETTING: TCanvasDrawSetting = {\r\n\tstrokeStyle: '#000000',\r\n\tfillStyle: '#ffff00',\r\n\tlineWidth: 4,\r\n}\r\n\r\nexport class Scene {\r\n\tprotected geometryConstructor: TGeometryType\r\n\tprotected geometries: Array<TGeometryType>\r\n\tprotected config: TSceneConfig\r\n\tprotected tools: TSceneTools\r\n\tprotected toolState: TSceneToolState\r\n\tprotected mouseState: TSceneMouseState\r\n\tprotected keyboardState: TSceneKeyboardState\r\n\tprotected offScreen: TSceneoffScreen\r\n\tprotected canvasElement: HTMLCanvasElement\r\n\tprotected canvasCtx: CanvasRenderingContext2D\r\n\tconstructor(canvasElement: HTMLCanvasElement) {\r\n\t\tif (!canvasElement || canvasElement.nodeName.toUpperCase() !== 'CANVAS') {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.geometryConstructor\r\n\t\tthis.geometries\r\n\t\tthis.config\r\n\t\tthis.tools\r\n\t\tthis.toolState\r\n\t\tthis.mouseState\r\n\t\tthis.keyboardState\r\n\t\tthis.offScreen\r\n\t\tthis.canvasCtx\r\n\t\tthis.canvasElement = canvasElement\r\n\t}\r\n\r\n\tpublic initScene(): void {\r\n\t\tthis.bindWindowResizeEvent()\r\n\t\tthis.geometryConstructor = null\r\n\t\tthis.geometries = []\r\n\t\tthis.config = {\r\n\t\t\tstate: ECanvasState.DRAWING,\r\n\t\t\tcanvasRect: this.createCanvasRect(),\r\n\t\t\tdirty: false,\r\n\t\t\treDrawByResizeTimer: null,\r\n\t\t}\r\n\t\tthis.tools = this.initTools()\r\n\t\tthis.toolState = this.initToolState()\r\n\t\tthis.mouseState = this.initMouseState()\r\n\t\tthis.keyboardState = this.initKeyboardState()\r\n\t\tthis.offScreen = this.createOffScreenCanvas()\r\n\t\tthis.canvasCtx = this.canvasElement.getContext('2d') as CanvasRenderingContext2D\r\n\t\tthis.setCanvasElementRect()\r\n\t\t/* rAF 持续渲染 */\r\n\t\tthis.continuedRender()\r\n\t}\r\n\r\n\tprivate bindWindowResizeEvent(): void {\r\n\t\twindow.addEventListener('resize', evte => {\r\n\t\t\twindow.clearTimeout(this.config.reDrawByResizeTimer)\r\n\t\t\tthis.config.reDrawByResizeTimer = window.setTimeout(() => {\r\n\t\t\t\tthis.config.canvasRect = this.createCanvasRect()\r\n\t\t\t\tthis.setCanvasElementRect()\r\n\t\t\t\t/* 重绘输出画布 */\r\n\t\t\t\tthis.clearCanvas(this.canvasCtx)\r\n\t\t\t\tfor (let i = this.geometries.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tthis.geometries[i].draw(this.canvasCtx)\r\n\t\t\t\t}\r\n\t\t\t}, 300)\r\n\t\t})\r\n\t}\r\n\r\n\tprivate setCanvasElementRect(rect: { [key: string]: any } = {}): void {\r\n\t\tconst canvasRect: TDOMClientRectJSON = { ...this.config.canvasRect, ...rect }\r\n\t\tthis.canvasElement.tabIndex = 0\r\n\t\tthis.canvasElement.width = canvasRect.width\r\n\t\tthis.canvasElement.height = canvasRect.height\r\n\t\tthis.offScreen.cacheCanvasElement.width = canvasRect.width\r\n\t\tthis.offScreen.cacheCanvasElement.height = canvasRect.height\r\n\t}\r\n\r\n\tprivate initToolState(): TSceneToolState {\r\n\t\tconst paintBrushState: TCanvasDrawSetting = { ...DEFAULT_CANVAS_DRAW_SETTING }\r\n\t\treturn {\r\n\t\t\tpaintBrushState,\r\n\t\t\tsmooth: false,\r\n\t\t}\r\n\t}\r\n\r\n\tprivate initTools(): TSceneTools {\r\n\t\tconst boxSelector: BoxSelectTool = new BoxSelectTool(0, 0, 0, 0)\r\n\t\treturn {\r\n\t\t\tboxSelector,\r\n\t\t}\r\n\t}\r\n\r\n\tprivate initMouseState(): TSceneMouseState {\r\n\t\treturn {\r\n\t\t\tx: -1,\r\n\t\t\ty: -1,\r\n\t\t\ttargetOffsetX: 0,\r\n\t\t\ttargetOffsetY: 0,\r\n\t\t\tselectedIndexs: [],\r\n\t\t\tdown: false,\r\n\t\t\tpointTarget: null,\r\n\t\t\ttoolTarget: null,\r\n\t\t\tisMove: false,\r\n\t\t}\r\n\t}\r\n\r\n\tprivate initKeyboardState(): TSceneKeyboardState {\r\n\t\treturn {\r\n\t\t\tkeys: [],\r\n\t\t}\r\n\t}\r\n\r\n\tprivate createCanvasRect(): TDOMClientRectJSON {\r\n\t\tconst domRect: TDOMClientRect = this.canvasElement.getBoundingClientRect()\r\n\t\treturn domRect.toJSON()\r\n\t}\r\n\r\n\tprivate createOffScreenCanvas(): TSceneoffScreen {\r\n\t\tconst cacheCanvasElement: HTMLCanvasElement = document.createElement('canvas')\r\n\t\tconst offScreen: TSceneoffScreen = {\r\n\t\t\tcacheCanvasElement,\r\n\t\t\tcacheCanvasCtx: cacheCanvasElement.getContext('2d'),\r\n\t\t}\r\n\t\t/*\r\n            测试 \r\n         */\r\n\t\t// const tc1 = document.getElementById(`t_c_1`)\r\n\t\t// tc1 && (() => { tc1.innerHTML = '' })()\r\n\t\t// tc1 && (() => { tc1.appendChild(offScreen.cacheCanvasElement) })()\r\n\t\treturn offScreen\r\n\t}\r\n\r\n\tprivate continuedRender(): void {\r\n\t\twindow.requestAnimationFrame(() => {\r\n\t\t\tif (!this.config.dirty) {\r\n\t\t\t\tthis.continuedRender()\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tthis.clearCanvas(this.canvasCtx)\r\n\t\t\t/* 读取缓存画布图像并绘制输出 */\r\n\t\t\tthis.paintWith(this.canvasCtx, this.offScreen.cacheCanvasElement)\r\n\t\t\tif (this.mouseState.toolTarget) {\r\n\t\t\t\tthis.mouseState.toolTarget.draw(this.canvasCtx)\r\n\t\t\t}\r\n\t\t\tif (this.mouseState.pointTarget) {\r\n\t\t\t\tthis.mouseState.pointTarget.draw(this.canvasCtx)\r\n\t\t\t}\r\n\t\t\tfor (let i = this.mouseState.selectedIndexs.length - 1; i >= 0; i--) {\r\n\t\t\t\tconst geometry = this.geometries[this.mouseState.selectedIndexs[i]]\r\n\t\t\t\t// if (geometry === this.mouseState.pointTarget) {\r\n\t\t\t\t//     continue\r\n\t\t\t\t// }\r\n\t\t\t\tgeometry.draw(this.canvasCtx)\r\n\t\t\t}\r\n\t\t\tthis.continuedRender()\r\n\t\t})\r\n\t}\r\n\r\n\tprivate rerenderWith(ctx: CanvasRenderingContext2D, geometries: Array<TGeometryType> = []): void {\r\n\t\tconst _geometries: Array<TGeometryType> = geometries.length ? geometries : this.geometries\r\n\t\tthis.clearCanvas(ctx)\r\n\t\tfor (let i: number = 0; i < _geometries.length; i++) {\r\n\t\t\t_geometries[i].draw(ctx)\r\n\t\t}\r\n\t}\r\n\r\n\tpublic rerender(): void {\r\n\t\tthis.rerenderWith(this.offScreen.cacheCanvasCtx)\r\n\t\tthis.rerenderWith(this.canvasCtx)\r\n\t}\r\n\r\n\tpublic getToolState(): TSceneToolState {\r\n\t\treturn JSON.parse(JSON.stringify(this.toolState))\r\n\t}\r\n\r\n\tpublic setToolState(toolState: TSceneToolState): void {\r\n\t\tthis.toolState = JSON.parse(JSON.stringify(toolState))\r\n\t}\r\n\r\n\tpublic setGeometryConstructor(geometryConstructor: any): void {\r\n\t\tthis.geometryConstructor = geometryConstructor\r\n\t}\r\n\r\n\tpublic toggleStateToDrawing(): void {\r\n\t\tthis.config.state = ECanvasState.DRAWING\r\n\t}\r\n\r\n\tpublic toggleStateToSelect(): void {\r\n\t\tthis.config.state = ECanvasState.SELECT\r\n\t}\r\n\r\n\tpublic clearAllGeometries(): void {\r\n\t\tthis.geometries = []\r\n\t}\r\n\r\n\tpublic removeGeometry(index: number): void {\r\n\t\tif (String(+index) === 'NaN' || index < 0) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.geometries.splice(index, 1)\r\n\t}\r\n\r\n\tpublic addGeometry(geometry: TGeometryType): void {\r\n\t\tthis.geometries.push(geometry)\r\n\t}\r\n\r\n\tpublic pushGeometries(geometries: Array<TGeometryType>): void {\r\n\t\tgeometries.forEach(item => {\r\n\t\t\tthis.geometries.push(item)\r\n\t\t})\r\n\t}\r\n\r\n\tpublic clearCanvas(ctx: CanvasRenderingContext2D): void {\r\n\t\tctx.clearRect(0, 0, this.config.canvasRect.width, this.config.canvasRect.height)\r\n\t}\r\n\r\n\tpublic paintWith(ctx: CanvasRenderingContext2D, sourceCanvas: HTMLCanvasElement, x = 0, y = 0): void {\r\n\t\tctx.drawImage(sourceCanvas, x, y, this.config.canvasRect.width, this.config.canvasRect.height)\r\n\t}\r\n\r\n\tpublic findClickedTarget(x: number, y: number): TSceneClickFoundRes {\r\n\t\tlet geometryTarget = null\r\n\t\tlet geometryTargetIndex = -1\r\n\t\tfor (let i = this.geometries.length - 1; i >= 0; i--) {\r\n\t\t\tif (this.geometries[i].choose(x, y) && !geometryTarget) {\r\n\t\t\t\tgeometryTarget = this.geometries[i]\r\n\t\t\t\tgeometryTargetIndex = i\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tgeometryTarget,\r\n\t\t\tgeometryTargetIndex,\r\n\t\t}\r\n\t}\r\n}\r\n","const drawDashLine = (ctx: CanvasRenderingContext2D, [x1, y1]: [number, number], [x2, y2]: [number, number], step = 5): void => {\r\n\tconst x: number = x2 - x1\r\n\tconst y: number = y2 - y1\r\n\tconst count: number = Math.floor(Math.sqrt(x * x + y * y) / step)\r\n\tconst xv: number = x / count\r\n\tconst yv: number = y / count\r\n\tfor (let i: number = 0; i < count; i++) {\r\n\t\tif (i % 2 === 0) {\r\n\t\t\tctx.moveTo(x1, y1)\r\n\t\t} else {\r\n\t\t\tctx.lineTo(x1, y1)\r\n\t\t}\r\n\t\tx1 += xv\r\n\t\ty1 += yv\r\n\t}\r\n\tctx.lineTo(x2, y2)\r\n}\r\n\r\nexport class BoxSelectTool {\r\n\tprivate brushConfig: { [key: string]: any }\r\n\tprivate x: number\r\n\tprivate y: number\r\n\tprivate w: number\r\n\tprivate h: number\r\n\tconstructor(x: number, y: number, w: number, h: number) {\r\n\t\tthis.brushConfig = {\r\n\t\t\tfillStyle: 'rgba(255, 255, 255, 0)',\r\n\t\t\tlineWidth: 1,\r\n\t\t\tstrokeStyle: 'rgba(0, 0, 0, 1)',\r\n\t\t}\r\n\t\tthis.x = x\r\n\t\tthis.y = y\r\n\t\tthis.w = w\r\n\t\tthis.h = h\r\n\t}\r\n\r\n\tsetStartCoordinate(x: number, y: number): void {\r\n\t\tthis.x = x + this.brushConfig.lineWidth\r\n\t\tthis.y = y + this.brushConfig.lineWidth\r\n\t}\r\n\r\n\trestoreStatus(): void {\r\n\t\tthis.x = 0\r\n\t\tthis.y = 0\r\n\t\tthis.w = 0\r\n\t\tthis.h = 0\r\n\t}\r\n\r\n\tsetShapeParameter(x: number, y: number): void {\r\n\t\tthis.w = x - this.x\r\n\t\tthis.h = y - this.y\r\n\t}\r\n\r\n\tdraw(ctx: CanvasRenderingContext2D): void {\r\n\t\tctx.beginPath()\r\n\t\tctx.fillStyle = this.brushConfig.fillStyle\r\n\t\tctx.strokeStyle = this.brushConfig.strokeStyle\r\n\t\tctx.lineWidth = this.brushConfig.lineWidth\r\n\t\tthis.drawDashRect(ctx, this.x, this.y, this.w, this.h)\r\n\t\tctx.closePath()\r\n\t}\r\n\r\n\tdrawDashRect(ctx: CanvasRenderingContext2D, left: number, top: number, width: number, height: number, step: number = 5): void {\r\n\t\tdrawDashLine(ctx, [left, top], [left + width, top], step)\r\n\t\tctx.stroke()\r\n\t\tdrawDashLine(ctx, [left + width, top], [left + width, top + height], step)\r\n\t\tctx.stroke()\r\n\t\tdrawDashLine(ctx, [left + width, top + height], [left, top + height], step)\r\n\t\tctx.stroke()\r\n\t\tdrawDashLine(ctx, [left, top + height], [left, top], step)\r\n\t\tctx.stroke()\r\n\t}\r\n}\r\n","export enum EEVENT_NAMESPANCE {\r\n\tDRAW_START = 'DRAW_START',\r\n\tDRAW_DOING = 'DRAW_DOING',\r\n\tDRAW_FINISHED = 'DRAW_FINISHED',\r\n\tSELECT = 'SELECT',\r\n\tCANCEL_SELECT = 'CANCEL_SELECT',\r\n\tDELETE_ONE = 'DELETE_ONE',\r\n}\r\n\r\nexport default class Events {\r\n\tprivate events: { [key: string]: any }\r\n\tconstructor() {\r\n\t\tthis.events = {}\r\n\t}\r\n\r\n\tpublic on(name: string, callback: Function): void {\r\n\t\tif (typeof name !== 'string' || !name || typeof callback !== 'function') {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tif (!this.events[name]) {\r\n\t\t\tthis.events[name] = []\r\n\t\t}\r\n\t\tthis.events[name].push(callback)\r\n\t}\r\n\r\n\tpublic emit(name: string): void {\r\n\t\tif (!arguments.length || typeof name !== 'string' || !this.events[name]) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst params: any = Array.from(arguments).splice(1)\r\n\t\tthis.events[name].forEach((item: Function, index: number) => {\r\n\t\t\titem(...params)\r\n\t\t})\r\n\t}\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { CanvasContoller as _CanvasContoller } from './Scene/CanvasController'\r\nimport { Circle as _Circle } from './Geometies/Circle'\r\nimport { Line as _Line } from './Geometies/Line'\r\nimport { Rect as _Rect } from './Geometies/Rect'\r\n\r\nexport const Circle = _Circle\r\nexport const Line = _Line\r\nexport const Rect = _Rect\r\nexport const CanvasContoller = _CanvasContoller\r\nexport default _CanvasContoller\r\n"],"names":[],"sourceRoot":""}